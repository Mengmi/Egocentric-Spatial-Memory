/*
 * MoveUAV.cpp
 *
 *  Created on: 11 Oct, 2014
 *      Author: lin
 */

#include<ros/ros.h>
#include <gazebo_msgs/SetModelState.h>
#include<tf/transform_broadcaster.h>
#include "sensor_msgs/LaserScan.h"
#include <sensor_msgs/JointState.h>
#include <visualization_msgs/Marker.h>
#include <std_msgs/Float64.h>
#include "std_msgs/Float32MultiArray.h"
 #include <visualization_msgs/Marker.h>

#include <stdio.h>
#include <vector>
#include <stdlib.h>
#include <iostream>
#include <fstream>

#define MOTION_UPDATE_RATE 50
#define HEAVE_RES 0.5
#define ALTITUDE 1.5

using namespace std;


ros::Subscriber laser_scan_sub; // subscriber to the robot's laser scan topic
void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan);

int main(int argc, char** argv)
{
	
	//ROS stuff
	ros::init(argc, argv, "MoveRobot");
	ros::NodeHandle n;

	//tf publisher
	tf::TransformBroadcaster tf_broadcaster_world;
	geometry_msgs::TransformStamped world_tf;

	world_tf.header.frame_id = "world";
	world_tf.child_frame_id = "body";

	//service client for setting model state
	ros::ServiceClient client = n.serviceClient<gazebo_msgs::SetModelState>("/gazebo/set_model_state");
	gazebo_msgs::SetModelState setmodelstate;

	//Laser Scanner subscriber
	laser_scan_sub = n.subscribe("/myRobot/laser_scan1", 1, &scanCallback);

	
	//robot Model State Init
	gazebo_msgs::ModelState modelstate;
	modelstate.model_name = "myRobot";
	modelstate.reference_frame = "world";
	geometry_msgs::Twist start_twist;
	start_twist.linear.x = 0.0;
	start_twist.linear.y = 0.0;
	start_twist.linear.z = 0.0;
	start_twist.angular.x = 0.0;
	start_twist.angular.y = 0.0;
	start_twist.angular.z = 0.0;

	ros::Rate rate(MOTION_UPDATE_RATE);

	//Heave Motion
	ROS_INFO("MOVE IT!");
	double alti =0;
	
	//Start moving
	while(ros::ok())
	{
		//Deal with TF
		world_tf.header.stamp = ros::Time::now();
		world_tf.transform.translation.x = 0;
		world_tf.transform.translation.y = 0;
		world_tf.transform.translation.z = alti;
                //geometry_msgs::Quaternion q= tf::createQuaternionMsgFromYaw(0); 
		world_tf.transform.rotation = tf::createQuaternionMsgFromYaw(0);
		tf_broadcaster_world.sendTransform(world_tf);

		modelstate.pose.position.x = 0;
		modelstate.pose.position.y = 0;
		modelstate.pose.position.z = alti;
		modelstate.pose.orientation.x = 0;
		modelstate.pose.orientation.y = 0;
		modelstate.pose.orientation.z = 0;
		modelstate.pose.orientation.w = 0;
		modelstate.twist = start_twist;

		setmodelstate.request.model_state = modelstate;

		if (client.call(setmodelstate))
		{
			//ROS_INFO("Call SetModelState service Successfully: %f",alti);
		}
		else
		{
			//ROS_ERROR("Failed to call setModelState service ");
			return 0;
		}
		
		ros::spinOnce();
		rate.sleep();		
		
	}
	

	ROS_INFO("Exit! Process Completed!");

	return 1; //end of main program
}


// Process the incoming laser scan message
void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)
{

	for (int currIndex = 0 ; currIndex < 1081; currIndex++)
	{
		// scan->ranges[currIndex]*1000; //convert from meter to mm
		
	}
	
}


